blueprint:
  name: Wykrywanie problemów i powiadomienia dla wszystkich czujników binarnych
  description: Regularnie testuje wszystkie czujniki binarne z klasą urządzenia „problem”,
    a jeśli problem występuje, wykonuje akcję.
  domain: automation
  input:
    exclude:
      name: Wykluczone czujniki
      description: binary_sensors do wykluczenia z wykrywania. Obsługiwane są tylko
        encje!
      default:
        entity_id: []
      selector:
        target:
          entity:
            device_class: problem
    actions:
      name: Akcje
      description: Powiadomienia lub inne akcje do uruchomienia. {{sensors}} jest
        zastąpiony przez nazwy czujników zgłaszających problem.
      selector:
        action: {}
  source_url: https://gist.github.com/MariuszTr/d648da47c91ffc6ed11ff8aaaf9b489a
variables:
  exclude: !input 'exclude'
  sensors: "{% set result = namespace(sensors=[]) %} {% for state in states.binary_sensor\
    \ | selectattr('attributes.device_class', '==', 'problem') | selectattr('state',\
    \ '==', 'on') %}\n  {% if not state.entity_id in exclude.entity_id %}\n    {%\
    \ set result.sensors = result.sensors + [state.name] %}\n  {% endif %}\n{% endfor\
    \ %} {{result.sensors|join(', ')}}"
trigger:
- platform: time_pattern
  minutes: /1
condition: []
action:
- choose: []
  default: !input 'actions'
mode: single
