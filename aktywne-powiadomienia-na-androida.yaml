blueprint:
  name: Aktywne powiadomienia na Androida
  description: |
Wysyłaj aktywne powiadomienia na urządzenie z Androidem
    Dla każdej akcji możesz otworzyć adres URL, aplikację na urządzeniu lub załadować widok / pulpit nawigacyjny lovelace.
    Jeśli planujesz używać widoku lovelace, format to /lovelace/test, gdzie test jest zastępowany przez zdefiniowaną ścieżkę w zdefiniowanym widoku.
    Jeśli planujesz używać pulpitu nawigacyjnego lovelace, format będzie wyglądał następująco /lovelace-dashboard/view, gdzie /lovelace-dashboard/ jest zastępowany przez zdefiniowany adres URL pulpitu nawigacyjnego
    a widok zostanie zastąpiony zdefiniowaną ścieżką w tym kokpicie.
    Aby wybrać aplikację do otwarcia, poprzedź nazwę pakietu przedrostkiem app://.
    Jeśli urządzenie nie ma zainstalowanej aplikacji, aplikacja Home Assistant otworzy się na domyślnej stronie.
    Jeśli zdefiniujesz akcję i identyfikator URI dla przycisku, URI będzie miał pierwszeństwo przed akcją.
  domain: automation
  input:
    notify_device:
      name: Urządzenie do powiadomienia
      description: Urządzenie musi mieć zainstalowaną oficjalną aplikację Home Assistant, aby otrzymywać powiadomienia
      selector:
        device:
          integration: mobile_app

    trigger_entity:
      name: Encja wyzwalająca
      description: Wyślij powiadomienie, gdy ta wartość logiczna się włączy
      selector:
        entity:
          domain: binary_sensor

    notification_title:
      name: Tytuł powiadomienia (opcjonalnie)
      description: Tytuł powiadomienia
      default: ""

    notification_message:
      name: Wiadomość z powiadomieniem (opcjonalnie)
      description: Treść powiadomienia
      default: ""
    
    persistent_notification:
      name: Utworzyć trwałe powiadomienie?
      description: Powiadomień trwałych nie można wyłączyć, przesuwając palcem
      default: false
      selector:
        boolean:

# Action 1

    action_1_title:
      name: Nazwa pierwszej akcji
      description: Nazwa pierwszego przycisku
      default: ""
      
    action_1_uri:
      name: Identyfikator URI akcji 1 (opcjonalnie)
      description: Opcjonalny identyfikator URI dla pierwszej akcji
      default: ""

    first_action:
      name: Akcja 1
      description: "Akcja do uruchomienia po kliknięciu pierwszej akcji"
      default: []
      selector:
        action:

# Action 2

    action_2_title:
      name: Nazwa drugiej akcji
      description: Nazwa drugiego przycisku
      default: ""

    action_2_uri:
      name: Identyfikator URI akcji 2 (opcjonalnie)
      description: Opcjonalny identyfikator URI dla drugiej akcji
      default: ""

    second_action:
      name: Akcja 2
      description: "Akcja do uruchomienia po kliknięciu drugiej akcji"
      default: []
      selector:
        action:

# Action 3
    
    action_3_title:
      name: Nazwa trzeciej akcji
      description: Nazwa trzeciego przycisku
      default: ""
      
    action_3_uri:
      name: Identyfikator URI akcji 3 (opcjonalnie)
      description: Opcjonalny identyfikator URI dla trzeciej akcji
      default: ""

    third_action:
      name: Akcja 3
      description: "Akcja do uruchomienia po kliknięciu trzeciej akcji"
      default: []
      selector:
        action:

mode: restart
max_exceeded: silent

variables:
  notify_device: !input notify_device
  trigger_entity: !input trigger_entity
  notification_title: !input notification_title
  notification_message: !input notification_message
  persistent_notification: !input persistent_notification
  action_1_title: !input action_1_title
  action_1_uri: !input action_1_uri
  first_action: !input first_action
  action_2_title: !input action_2_title
  action_2_uri: !input action_2_uri
  second_action: !input second_action
  action_3_title: !input action_3_title
  action_3_uri: !input action_3_uri
  third_action: !input third_action

trigger:
  platform: state
  entity_id: !input trigger_entity
  from: "off"
  to: "on"

action:
  # Reset trigger entity
  - service: input_boolean.turn_off
    entity_id: !input trigger_entity

  # Send actionable notification
  - domain: mobile_app
    type: notify
    device_id: !input notify_device
    title: "{{ notification_title }}"
    message: "{{ notification_message }}"
    data:
      tag: "{{ notification_title }}"
      persistent: "{{ persistent_notification }}"
      actions: >
        {% set titles = [action_1_title, action_2_title, action_3_title] %}
        {% set uris = [action_1_uri, action_2_uri, action_3_uri] %}
        {% set actions = namespace(data = []) %}

        {% for title in titles %}
          {% if title|length %}
            {% set uri = uris[loop.index - 1] %}
            {% set action_name = "action" + loop.index|string %}
            {% set action = {
              "action": "URI" if uri|length else action_name,
              "title": title,
              "uri": uri 
              }
            %}
            {% set actions.data = actions.data + [action] %}
          {% endif %}
        {% endfor %}
        {{ actions.data }}

  # Wait for the user to select an action
  - wait_for_trigger:
      platform: event
      event_type: mobile_app_notification_action

  # Do the action that the user selected
  - choose:
    - conditions: "{{ wait.trigger.event.data.action == 'action1' }}"
      sequence: !input first_action
    - conditions: "{{ wait.trigger.event.data.action == 'action2' }}"
      sequence: !input second_action
    - conditions: "{{ wait.trigger.event.data.action == 'action3' }}"
      sequence: !input third_action
